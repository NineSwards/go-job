// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: server/registry/job_registry.proto

package registry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobServerRegisterClient is the client API for JobServerRegister service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobServerRegisterClient interface {
	JobRegistry(ctx context.Context, in *RegistryRequest, opts ...grpc.CallOption) (*RegistryReply, error)
	JobUnRegistry(ctx context.Context, in *RegistryRequest, opts ...grpc.CallOption) (*RegistryReply, error)
}

type jobServerRegisterClient struct {
	cc grpc.ClientConnInterface
}

func NewJobServerRegisterClient(cc grpc.ClientConnInterface) JobServerRegisterClient {
	return &jobServerRegisterClient{cc}
}

func (c *jobServerRegisterClient) JobRegistry(ctx context.Context, in *RegistryRequest, opts ...grpc.CallOption) (*RegistryReply, error) {
	out := new(RegistryReply)
	err := c.cc.Invoke(ctx, "/proto.registry.JobServerRegister/JobRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServerRegisterClient) JobUnRegistry(ctx context.Context, in *RegistryRequest, opts ...grpc.CallOption) (*RegistryReply, error) {
	out := new(RegistryReply)
	err := c.cc.Invoke(ctx, "/proto.registry.JobServerRegister/JobUnRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobServerRegisterServer is the server API for JobServerRegister service.
// All implementations must embed UnimplementedJobServerRegisterServer
// for forward compatibility
type JobServerRegisterServer interface {
	JobRegistry(context.Context, *RegistryRequest) (*RegistryReply, error)
	JobUnRegistry(context.Context, *RegistryRequest) (*RegistryReply, error)
	mustEmbedUnimplementedJobServerRegisterServer()
}

// UnimplementedJobServerRegisterServer must be embedded to have forward compatible implementations.
type UnimplementedJobServerRegisterServer struct {
}

func (UnimplementedJobServerRegisterServer) JobRegistry(context.Context, *RegistryRequest) (*RegistryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobRegistry not implemented")
}
func (UnimplementedJobServerRegisterServer) JobUnRegistry(context.Context, *RegistryRequest) (*RegistryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobUnRegistry not implemented")
}
func (UnimplementedJobServerRegisterServer) mustEmbedUnimplementedJobServerRegisterServer() {}

// UnsafeJobServerRegisterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobServerRegisterServer will
// result in compilation errors.
type UnsafeJobServerRegisterServer interface {
	mustEmbedUnimplementedJobServerRegisterServer()
}

func RegisterJobServerRegisterServer(s grpc.ServiceRegistrar, srv JobServerRegisterServer) {
	s.RegisterService(&JobServerRegister_ServiceDesc, srv)
}

func _JobServerRegister_JobRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServerRegisterServer).JobRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.registry.JobServerRegister/JobRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServerRegisterServer).JobRegistry(ctx, req.(*RegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobServerRegister_JobUnRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServerRegisterServer).JobUnRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.registry.JobServerRegister/JobUnRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServerRegisterServer).JobUnRegistry(ctx, req.(*RegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobServerRegister_ServiceDesc is the grpc.ServiceDesc for JobServerRegister service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobServerRegister_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.registry.JobServerRegister",
	HandlerType: (*JobServerRegisterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JobRegistry",
			Handler:    _JobServerRegister_JobRegistry_Handler,
		},
		{
			MethodName: "JobUnRegistry",
			Handler:    _JobServerRegister_JobUnRegistry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/registry/job_registry.proto",
}
